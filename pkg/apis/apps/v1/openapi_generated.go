// +build !ignore_autogenerated

// Copyright 2019 The Kubernetes Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.HourRange":                    schema_pkg_apis_apps_v1_HourRange(ref),
		"github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.Overrides":                    schema_pkg_apis_apps_v1_Overrides(ref),
		"github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.PackageFilter":                schema_pkg_apis_apps_v1_PackageFilter(ref),
		"github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.PackageOverride":              schema_pkg_apis_apps_v1_PackageOverride(ref),
		"github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.SubscriberItem":               schema_pkg_apis_apps_v1_SubscriberItem(ref),
		"github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.Subscription":                 schema_pkg_apis_apps_v1_Subscription(ref),
		"github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.SubscriptionList":             schema_pkg_apis_apps_v1_SubscriptionList(ref),
		"github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.SubscriptionPerClusterStatus": schema_pkg_apis_apps_v1_SubscriptionPerClusterStatus(ref),
		"github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.SubscriptionSpec":             schema_pkg_apis_apps_v1_SubscriptionSpec(ref),
		"github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.SubscriptionStatus":           schema_pkg_apis_apps_v1_SubscriptionStatus(ref),
		"github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.SubscriptionUnitStatus":       schema_pkg_apis_apps_v1_SubscriptionUnitStatus(ref),
		"github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.TimeWindow":                   schema_pkg_apis_apps_v1_TimeWindow(ref),
	}
}

func schema_pkg_apis_apps_v1_HourRange(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "HourRange time format for each time will be Kitchen format, defined at https://golang.org/pkg/time/#pkg-constants",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"start": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"end": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_apps_v1_Overrides(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Overrides field in deployable",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"packageName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of package. Required.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"packageAlias": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional string providing an alias for the package.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"packageOverrides": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of raw JSON data providing the settings to override for this package.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.PackageOverride"),
									},
								},
							},
						},
					},
				},
				Required: []string{"packageName"},
			},
		},
		Dependencies: []string{
			"github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.PackageOverride"},
	}
}

func schema_pkg_apis_apps_v1_PackageFilter(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PackageFilter defines the reference to Channel",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"labelSelector": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector"),
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"filterRef": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector"},
	}
}

func schema_pkg_apis_apps_v1_PackageOverride(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PackageOverride describes rules for override",
				Type:        []string{"object"},
			},
		},
	}
}

func schema_pkg_apis_apps_v1_SubscriberItem(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SubscriberItem defines subscriber item to share subscribers with different channel types",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"Subscription": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.Subscription"),
						},
					},
					"SubscriptionConfigMap": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.ConfigMap"),
						},
					},
					"Channel": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/open-cluster-management/multicloud-operators-channel/pkg/apis/apps/v1.Channel"),
						},
					},
					"ChannelSecret": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.Secret"),
						},
					},
					"ChannelConfigMap": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.ConfigMap"),
						},
					},
				},
				Required: []string{"Subscription", "SubscriptionConfigMap", "Channel", "ChannelSecret", "ChannelConfigMap"},
			},
		},
		Dependencies: []string{
			"github.com/open-cluster-management/multicloud-operators-channel/pkg/apis/apps/v1.Channel", "github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.Subscription", "k8s.io/api/core/v1.ConfigMap", "k8s.io/api/core/v1.Secret"},
	}
}

func schema_pkg_apis_apps_v1_Subscription(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Subscription is the Schema for the subscriptions API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "The specification for the Subscription.",
							Ref:         ref("github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.SubscriptionSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "The most recent observed status of the Subscription.",
							Ref:         ref("github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.SubscriptionStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.SubscriptionSpec", "github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.SubscriptionStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_apps_v1_SubscriptionList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SubscriptionList contains a list of Subscription",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of Subscription objects.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.Subscription"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.Subscription", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_apps_v1_SubscriptionPerClusterStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SubscriptionPerClusterStatus defines the status for a Subscription in a managed cluster. The key is the package name.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"packages": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.SubscriptionUnitStatus"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.SubscriptionUnitStatus"},
	}
}

func schema_pkg_apis_apps_v1_SubscriptionSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SubscriptionSpec defines the desired state of Subscription",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"channel": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the channel subscribed.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The targeted package in a Channel.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"packageFilter": {
						SchemaProps: spec.SchemaProps{
							Description: "The targeted collection of packages in a Channel.",
							Ref:         ref("github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.PackageFilter"),
						},
					},
					"packageOverrides": {
						SchemaProps: spec.SchemaProps{
							Description: "To provide flexibility to override package in channel with local input",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.Overrides"),
									},
								},
							},
						},
					},
					"placement": {
						SchemaProps: spec.SchemaProps{
							Description: "Placement rule that determines the target clusters. This is only used for the hub cluster.",
							Ref:         ref("github.com/open-cluster-management/multicloud-operators-placementrule/pkg/apis/apps/v1.Placement"),
						},
					},
					"overrides": {
						SchemaProps: spec.SchemaProps{
							Description: "The Overrides to apply when the subscription is applied to clusters. This is only used for the hub cluster.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/open-cluster-management/multicloud-operators-deployable/pkg/apis/apps/v1.Overrides"),
									},
								},
							},
						},
					},
					"timewindow": {
						SchemaProps: spec.SchemaProps{
							Description: "A time window during which the subscription takes affect.",
							Ref:         ref("github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.TimeWindow"),
						},
					},
				},
				Required: []string{"channel"},
			},
		},
		Dependencies: []string{
			"github.com/open-cluster-management/multicloud-operators-deployable/pkg/apis/apps/v1.Overrides", "github.com/open-cluster-management/multicloud-operators-placementrule/pkg/apis/apps/v1.Placement", "github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.Overrides", "github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.PackageFilter", "github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.TimeWindow"},
	}
}

func schema_pkg_apis_apps_v1_SubscriptionStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SubscriptionStatus defines the observed state of a Subscription",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"phase": {
						SchemaProps: spec.SchemaProps{
							Description: "Phase of the Subscription. Valid values can be an empty string (\"\"), meaning that the Subscription is in the hub cluster; \"Propagated\", meaning that the Subscription has been propagated to managed clusters; \"Subscribed\", meaning that the Subscription has been subscribed and it is a copy sitting in a managed cluster; or \"Failed\", meaning that the Subscription has some issues to solve.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "Human reaable message describing the current status.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "A reason string that explains the reason that brought the Subscription to its current status.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastUpdateTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The time when the last transition of status for the Subscription.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"statuses": {
						SchemaProps: spec.SchemaProps{
							Description: "For endpoint, it is the status of subscription, key is package name, For hub, it aggregates all status from managed clusters, with the keys being cluster names.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.SubscriptionPerClusterStatus"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.SubscriptionPerClusterStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_apps_v1_SubscriptionUnitStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SubscriptionUnitStatus defines status of a unit (subscription or package)",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"phase": {
						SchemaProps: spec.SchemaProps{
							Description: "Phase are Propagated if it is in the hub cluster or Subscribed if it is in a managed cluster.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "Human reaable message describing the current status.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "A reason string that explains the reason that brought the Subscription to its current status.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastUpdateTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The time when the last transition of status for the Subscription.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"resourceStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Raw JSON data describing the detailed status of the unit.",
							Ref:         ref("k8s.io/apimachinery/pkg/runtime.RawExtension"),
						},
					},
				},
				Required: []string{"lastUpdateTime"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time", "k8s.io/apimachinery/pkg/runtime.RawExtension"},
	}
}

func schema_pkg_apis_apps_v1_TimeWindow(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TimeWindow defines a time window for subscription to run or be blocked",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"windowtype": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of time window. Valid values include \"Active\" and \"Blocked\". Deploy only happens during an active time window. <kubebuilder:validation:Enum={active,blocked,Active,Blocked}>",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"location": {
						SchemaProps: spec.SchemaProps{
							Description: "Timezone definition as defined in https://en.wikipedia.org/wiki/List_of_tz_database_time_zones",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"daysofweek": {
						SchemaProps: spec.SchemaProps{
							Description: "The day of the week for this time window. Refer to https://golang.org/pkg/time/#Weekday",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"hours": {
						SchemaProps: spec.SchemaProps{
							Description: "The range of hours in a day.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.HourRange"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/open-cluster-management/multicloud-operators-subscription/pkg/apis/apps/v1.HourRange"},
	}
}
